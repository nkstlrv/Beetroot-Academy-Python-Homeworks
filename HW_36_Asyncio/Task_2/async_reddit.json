{"asyncio": {"missing_beans": {"comment": "Curio is even nicer, but unfortunately not being developed anymore.\n\nTrio also has its idiosyncrasies. For example the fact that they intentionally don\u2019t support the \"worker pattern\" ([example from the asyncio docs](https://docs.python.org/3/library/asyncio-queue.html#examples)). \n\nThe reasoning is that \"a background worker should not be an implementation detail\" which, frankly, just dismisses how these things are used in the real world.\n\nIt\u2019s a good idea from a theoretical point of view, like functional programming that doesn\u2019t allow side effects, but only as long as you don\u2019t apply it to the real world, where you pretty much need to have those.\n\nThat is to say: I like trio. For many things it\u2019s a lot nicer than asyncio. But it\u2019s also not always the go-to solution.\n\nAlso, asyncio is learning from trio. We have exception- groups and task groups now in asyncio.", "time": "2023-03-24 16:10:34"}, "d0ctor_light": {"comment": "At some degree, asyncio is great. But feels like you are choosing wrong instrument at the wrong place ..", "time": "2023-03-24 15:08:37"}, "spiker611": {"comment": "Try trio or anyio - they use structured concurrency that alleviates much of the issues with asyncio and threading.  Anyio is built on asyncio and trio so you can use either as a backend", "time": "2023-03-24 14:22:08"}, "SublimnAll": {"comment": "Seconding Trio. I also found the whole asyncio stuff to be unpythonic, messy and unclear but Trio was a beam of enlightenment in all that mess. Thorough documentation and essentially idiot-proof. Actually made me understand what I was doing!", "time": "2023-03-24 12:27:51"}, "mmcnl": {"comment": "Most tasks are not computational though. They are restricted by IO. So asyncio is great then.", "time": "2023-03-24 09:59:56"}}, "coroutine": {"bsenftner": {"comment": "I'm using FasAPI and testing various coroutine, and threading methods. I'm more experienced in multi-threading in C++ and finding the Python options to be quirky, poorly documented, only focused on I/O, and largely inappropriate for anything other than I/O - meaning actual compute requirements such as running an ML model halts everything. \n\nIt appears the Python ecosystem has a terminology problem, and are using the term \"threads\" too liberally, when they are not \"threads\" but co-operative multi-threading in the same manner that many GUI frameworks operate. I'm probably going to abandon Python's parallel code efforts simply because the terminology usage is too blurry, I have to actually implement and examine to figure out if it really is a thread, really is capable of not blocking other \"threads\" despite needing to spin-compute for durations as long as a few seconds. \n\nAchieving such in C++ is trivial, so I'm probably going to start cracking open C++/Python interoperability.", "time": "2023-03-24 12:53:25"}, "equeim": {"comment": "They use main thread's event loop (`Handler` with `Looper.getMainLooper()`) and background thread pool.\n\nWhen you start asynchronous operation your coroutine suspends (and returns control to event loop), and then some other thread (that for example does polling on tcp socket) resumes it on the main thread using `Handler.post()`. From caller perspective it works seamlessly, as if they never left main thread (of course implementation of this asynchronous operation will need to have some boilerplate code that does triggers resume and bridges callback/thread world with coroutine world. `suspendCancellableCoroutine` function is typically used for that).\n\nYou also can choose to resume your coroutine on background thread instead of main thread if you need to do some CPU-intensive calculations or blocking I/O. For that background threads in thread pool have their own event loops (to switch between threads/thread pools you pass `CoroutineDIspatcher`, typically from `Dispatchers` singleton, to `withContext` function).", "time": "2023-03-24 11:52:10"}, "SuperSlowmia": {"comment": "So my issues for me is that everytime I launch the game, all my mods are disabled...once I enable everything back and launch my save, I get an invisible city with errors spamming, here's what I got from my log: \n\n(Filename:  Line: -1)\n\nNullReferenceException: Object reference not set to an instance of an object\n  at Building.PlayAudio (.ListenerInfo listenerInfo, UInt16 buildingID) [0x00000] in &lt;filename unknown&gt;:0 \n  at BuildingManager.PlayAudioImpl (.ListenerInfo listenerInfo) [0x00000] in &lt;filename unknown&gt;:0 \n  at SimulationManagerBase`2[Manager,Properties].PlayAudio (.ListenerInfo listenerInfo) [0x00000] in &lt;filename unknown&gt;:0 \n  at BuildingManager.IAudibleManager.PlayAudio (.ListenerInfo listenerInfo) [0x00000] in &lt;filename unknown&gt;:0 \n  at AudioManager.FpsBoosterLateUpdate () [0x00000] in &lt;filename unknown&gt;:0 \n  at BehaviourUpdater.Updater.LateUpdate () [0x00000] in &lt;filename unknown&gt;:0 \nUnityEngine.DebugLogHandler:Internal_LogException(Exception, Object)\nUnityEngine.DebugLogHandler:LogException(Exception, Object)\nUnityEngine.Logger:LogException(Exception, Object)\nUnityEngine.Debug:LogException(Exception)\nBehaviourUpdater.Updater:LateUpdate()\n \n(Filename:  Line: -1)\n\nNullReferenceException: Object reference not set to an instance of an object\nat TreeAnarchy.Patches.TreeManagerPatches.BeginRenderingImplCoroutine (int,int,int,UnityEngine.RenderTexture,UnityEngine.RenderTexture,UnityEngine.RenderTexture) &lt;0x00038&gt;\nat (wrapper dynamic-method) TreeManager.TreeManager.BeginRenderingImpl_Patch0 (TreeManager,RenderManager/CameraInfo) &lt;0x006ac&gt;\nat SimulationManagerBase`2.BeginRendering (RenderManager/CameraInfo) &lt;0x00071&gt;\nat TreeManager.IRenderableManager.BeginRendering (RenderManager/CameraInfo) &lt;0x00024&gt;\nat RenderManager.FpsBoosterLateUpdate () &lt;0x0019d&gt;\nat BehaviourUpdater.Updater.LateUpdate () &lt;0x00592&gt;\n\n\nThis error kept spamming over and over, seems to be an issue with Tree Anarchy, guess I'll wait for a fix", "time": "2023-03-24 04:46:50"}, "kaffiene": {"comment": "I think you misunderstand my point. Godot uses a python like for us scripting. It's honed for Godot. UE could do the same with a python like that included coroutine features", "time": "2023-03-23 22:52:35"}, "CasualPeachSex": {"comment": "So, if I unload a scene in my level that is composed of multiple scenes using UnloadSceneAsync(), and then reload that scene later using LoadSceneAsync(additive), is it going to re-use/fetch that memory?  \n\n\nOr let's say I want to quickly reload a scene to reset it to its default state, after the player has moved objects. Would doing UnloadSceneAsync, and then LoadSceneAsync in a coroutine that waits for the async operations to finish double the memory usage, or would the memory be reused? Would I want to UnloadUnusedAssets?  \n\n\n        public static IEnumerator ReloadSceneAsyncCO(Scene scene, LoadSceneMode loadSceneMode = LoadSceneMode.Single, bool unloadUnusedAssets = false)\n        {\n            int buildIndex = scene.buildIndex;\n            AsyncOperation ao = SceneManager.UnloadSceneAsync(buildIndex);\n    \n            yield return ao;\n    \n            if (unloadUnusedAssets)\n            {\n                ao = Resources.UnloadUnusedAssets();\n                yield return ao;\n            }\n    \n            SceneManager.LoadSceneAsync(buildIndex, loadSceneMode);\n        }", "time": "2023-03-23 20:38:33"}}, "global interpreter lock": {"Conscious-Ball8373": {"comment": "In a way, yes - so long as someone has written those specific routines in C first. But there are still costs, eg calls to C code typically hold the Global Interpreter Lock and so prevent other threads from running. It can often be worked around but it becomes arcane very quickly - and since non-arcane-ness is one of Python's big selling points, you might as well ditch python at that point.", "time": "2023-03-22 12:38:14"}, "Kered13": {"comment": "The thing is that Python has a thing called the Global Interpreter Lock, which basically means that only a single thread can actually be executing Python code at a time. Multiple threads can be useful if most of the threads are going to be idle (blocked by IO for example), or are going to be busy in non-Python code (numpy and other libraries written in C/C++/Fortran).\n\nMulti-processing works around this because each process has it's own Python interpreter, but having multiple processes uses more memory and communication between the processes is more complicated and slower. But you actually get true parallelism.\n\nIn the first case where you are blocked on IO or something similar, you can also use asynchronous code, which is another form of concurrency where multiple coroutines share a single thread.", "time": "2023-03-21 19:09:23"}, "sersherz": {"comment": "The decorators and type validation are needed because Python has expanded to so many different things. Data pipelines and APIs should have really strict definitions of what can be passed through. I think these changes are in Python's philosophy. Look at the standard libraries. Multiprocessing allows you to overcome the global interpreter lock (GIL). The language was designed with GIL but also has workarounds.\n\nI feel decorators were really needed with more complicated functions added. Rather than running python as a script or stateful OOP program, it can now have stateless API calls and perform a procedure as it is called, rather than worrying about garbage collection and handling resources explicitly.\n\nI definitely agree that Python is simple to learn but extremely difficult to master given how vast it is and how much complexity there is to the language. I think this is often lost on people who hate the language and don't fully understand just how deep it goes.", "time": "2023-03-20 22:49:48"}, "StewedAngelSkins": {"comment": "fwiw you can't run python scripts in parallel with eachother due to global interpreter lock.", "time": "2023-03-19 14:02:47"}, "carrotlordofjapan": {"comment": "Python is slower across the board than say C, but different versions of python may suffer more or less from several factors.\n\nThe most common form of python is cpython this is an interpreted language, that means that instead of created machine code which runs directly on the processor python basically your code runs in a VM which is slow.\n\nOther versions of python like PyPy do not suffer from this because they are just in time compiled (JIT) this means that you run native assembly which makes PyPy around 8-10x faster iirc.\n\nHowever all python code suffers in speed because it has features which make programming intuitive such as garbage collection. Python deals with memory management for you, but that means it doesn't always make the optimal decisions.  Python has a global interpreter lock (GIL) which largely makes multithreading ineffective in native python. Many other features like this all amount to python being extremely slow compared to C. Luckily 1. Most code doesn't actually need to be optimized very much because processors are so fast, and 2. If need be just write the performance heavy code in C then call your C code directly from python, this is how math libraries like NumPy work.", "time": "2023-03-18 02:20:19"}}, "algorithms and data structures": {"NoResponsibility9118": {"comment": "The computer science degree is the hardest, but it is also the best, and not because it is hard! It is the best because it is the which with you will be able to apply to a variety of internships with as you do it. I was able to stop working as a dishwasher and work \"full time\" as an intern the whole time I was at the CS program. The salary was about 5 times my dishwashing job, so the weeks that was not in an internship (and looking for a new one), I had more money than if I had just keep my old job. That is such an amazing thing about WGU!   \n\n\nThe only thing is that you have to make sure to quickly knock out Discrete Maths 1 and Data Structures &amp; Algorithms 1, else you might not pass coding interviews.   \n\n\nSoftware Engineering is just as good, but CS has more weight to it on a resume, and doesnt get filtered out.", "time": "2023-03-24 16:10:30"}, "AutoModerator": {"comment": "It seems that you are looking for resources for learning Java.\n\nIn our *sidebar* (\"About\" on mobile), we have a section \"Free Tutorials\" where we list the most commonly recommended courses.\n\nTo make it easier for you, the recommendations are posted right here:\n\n* MOOC [Java Programming](http://java-programming.mooc.fi) from the University of Helsinki \n* [Java for Complete Beginners](https://www.udemy.com/java-tutorial)\n   * accompanying site [CaveOfProgramming](http://caveofprogramming.com)\n* [Derek Banas' Java Playlist](https://www.youtube.com/playlist?list=PLE7E8B7F4856C9B19)\n   * accompanying site [NewThinkTank](http://newthinktank.com/)\n* [Hyperskill](https://hi.hyperskill.org/) is a fairly new resource from *Jetbrains* (the maker of IntelliJ)\n\nAlso, don't forget to look at:\n\n* [The official Documentation](http://docs.oracle.com/javase/)\n* [The official Java Tutorials](http://www.oracle.com/technetwork/java/index-jsp-135888.html)\n* [Our community resources thread](https://www.reddit.com/r/learnjava/comments/md1loc/community_resources/)\n\nIf you are looking for learning resources for *Data Structures and Algorithms*, look into: \n\n\"Algorithms\" by Robert Sedgewick and Kevin Wayne - Princeton University\n\n+ Coursera course:\n   + [Part I](https://www.coursera.org/learn/algorithms-part1)\n   + [Part II](https://www.coursera.org/learn/algorithms-part2)\n+ Coursebook\n   + [Algorithms 4^th Edition](http://algs4.cs.princeton.edu/home/)\n\nYour post remains visible. There is nothing you need to do.\n\nI am a bot and this message was triggered by keywords like \"learn\", \"learning\", \"course\" in the title of your post.\n\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/learnjava) if you have any questions or concerns.*", "time": "2023-03-24 16:00:26"}, "AlphaLemur47": {"comment": "Syde alum here, graduated last year and am currently an engineer at Apple. Despite whatever the prevailing opinion is about the program being good for certain kinds of jobs, it isn\u2019t based on anything tangible.\n\nThe core syde courses and curriculum have been largely constant for its entire ~4 decade history. Product managers didn\u2019t exist and SWE certainly wasn\u2019t what it is now. We had a random conversation with SYDE faculty about this in 2nd year when the topic of an AI option came up (which is now offered, a series of courses you can take to have an option in AI listed on your degree). Things like this are tweaked to be relevant eg. Our data structures and algorithms course uses python, more akin to what one would find in industry, but engineering programs in general aren\u2019t job training for specific role\u2019s.\n\nI found it fun and interesting. I also found value in taking core engineering courses eg. fluid mechanics and thermodynamics not because they would be directly applicable to what I might want to do but help holistically understand other things. Lastly about the profs/faculty, some are bad, some are great, you might only ever hear about the polar extremes online, overall I\u2019d say not worth stressing about but also they did some better on average than other Waterloo programs. Feel free to dm if you have any specific questions.", "time": "2023-03-24 15:50:50"}, "Hog_enthusiast": {"comment": "Algorithms and Data Structures, Software Design principles. Most useful class by far was a theater class called voice and movement, where I learned proper posture and how to talk in a natural voice. Not being a CS gremlin will get you a lot of job offers", "time": "2023-03-24 15:48:23"}, "Top-Perspective2560": {"comment": "Data structures and algorithms. You don't actually need to code to understand those things, and the principles are pretty much language-agnostic. You will develop your skills in these things as you learn to code and use various data structures or algorithms to solve problems, but having some basic familiarity with them before you start will be a good thing.", "time": "2023-03-24 15:41:26"}}, "event loop": {"AutoModerator": {"comment": "Your submission has been removed because it concerns, or has been prompted by, a recent or current event. Recent events are a topic not covered in ELI5 under rule 2.  It's possible posted about before, even if this is not the case. Please search the subreddit before posting. If this is about a recent/current event, please consider trying a sub such as /r/news, /r/worldnews, /r/OutOfTheLoop, or /r/NoStupidQuestions. Please make sure to read their rules and their current megathreads (if related).\n\n**If you believe this post was removed erroneously**, please [use this form](https://old.reddit.com/message/compose?to=%2Fr%2Fexplainlikeimfive&amp;subject=Can%20you%20review%20my%20thread?&amp;message=Link:%20/r/explainlikeimfive/comments/120m31a/eli5_how_is_commercial_real_estate_overleveraged/%0A%0APlease%20answer%20the%20following%203%20questions:%0A%0A1.%20The%20concept%20I%20want%20explained:%0A%0A2.%20List%20the%20search%20terms%20you%20used%20to%20look%20for%20past%20posts%20on%20ELI5:%0A%0A3.%20How%20is%20this%20post%20unique:) and we will review your submission. Note that **if you do not fill out the form completely**, your message **will not be reviewed**.\n\n*I am a bot, and this action was performed automatically. Please [contact the moderators of this subreddit](/message/compose/?to=/r/explainlikeimfive) if you have any questions or concerns.*", "time": "2023-03-24 14:30:52"}, "VividDreams222": {"comment": "Absolutely loved it! I love how when she was flying up it was her trying to fly out of her grave while people try to bury her. It definitely symbolizes how she's trying to show them she's still around but they keep pushing her down. \n\nI do think it's a little weird that the mv didn't end matching with the audio (she wasn't running and breathless like the audio suggested), but I'm guessing the VOID mv or the movie will match with the audio better (after the listening event, it was discovered the whole album is a loop, transitioning into each song before hitting Womb, which ends the way Death starts)", "time": "2023-03-24 15:21:11"}, "Zolgrave": {"comment": "I would disagree, Moffat still is ahead on that front. We literally had from Moffat\u2019s day 1, Amy exists even though her parents were ate by the crack. We\u2019ve had loop &amp; broken event paradoxes tied together in his era as well. Or even before Moffat, The Doctor meeting the first human astronaut mission of Mars in the Classic era, not the Bowie Base Disaster. Same show where they invoked Back to the Future rules to answer Martha &amp; Clara\u2019s assurances for continued present existences. Chibnall or Moffat or RTD, the show we can have our cake &amp; eat it too.\nAs for Jack \u2014 if we\u2019re going by the relevant Moffat rules, one can opine that, Jack\u2019s a time traveler &amp; thus like 11 didn\u2019t lose his memory when the cracks surged, while all the other post-10 companions like Amy &amp; onwards haven\u2019t even started time-traveling yet.\nOn a side note \u2014 wasn\u2019t there some DWM production interview where Moffat (half)-jokingly applied his crack eating to not just his era but also to encompass all the show\u2019s discrepancies?", "time": "2023-03-24 14:50:06"}, "turtle4499": {"comment": "It does not. create\\_task runs your code at the NEXT event loop await. The task is still never started until await is called on it. \n\nThere are other ways to do some stuff before you enter it via some odder techniques, like using a class based async or returning the async function from a sync function.", "time": "2023-03-24 14:32:51"}}, "json": {"PinkFrojd": {"comment": "I don't want this to go endless but your advice with \"try it and see\" for memory helped. I created a few endpoints that generate JSON and write to files and read back and also same with stumpy. I keep seeing memory at 140 mb constantly even though I' still benchmarking it. So I think it's what you said, it spikes a little bit, but it's stays there.\nThank you for your support. I didn't meant this to be debugging session, but lot of concepts from IO are just stating functions. Flush, close, seek, buffers... I guess this has to be first understood outside of Crystal before I start understanding it in Crystal.", "time": "2023-03-24 16:21:46"}, "Zren": {"comment": "* https://old.reddit.com/.compact has just 1 HTML, 1 CSS, 1 JS + X thumbnails requests.\n  * https://i.imgur.com/2pIifmn.png\n* https://m.reddit.com (now i.reddit.com) has 1 HTML, 7 **blocking** JS, 1 WebFont, 1 CSS, 2-3 more JS, then finally a JSON for the `/hot` listing, +X thumbnails requests.\n  * https://i.imgur.com/4uLlU4C.png", "time": "2023-03-24 16:16:38"}, "efmccurdy": {"comment": "How are you accessing the flask server?\nDo you want to pass the \"ed\" part as a parameter?\n\nLook at the example that uses \n\n    @app.route('/product/&lt;name&gt;')\n\nhere: https://pythonbasics.org/flask-tutorial-routes/\n\nMaybe something like this?\n\n    @app.route('/load/&lt;jname&gt;')\n    def ed_logs(jname):\n        with open(jname+\".json\", \"r\") as log:\n            logData = json.load(log)\n        return jsonify(logData)\n\n\nso you would access that from the GUI using\n\n    request.get(f\"http://localhost:5000/load/{ED_entry.get()}\")\n\nDoes that make sense?", "time": "2023-03-24 16:14:34"}, "chris-the-web-dev": {"comment": "This may be obvious, but are you using \" or the smart quotes you posted? JSON only accepts \"", "time": "2023-03-24 16:09:18"}, "IrishChappieOToole": {"comment": "I've seen some shit, but that `package.json` terrifies me", "time": "2023-03-24 16:02:06"}}, "django": {"SpudnikV": {"comment": "I actually *like* that Actix and Axum are only concerned with one layer. (Even there, Actix is already much more \"batteries included\" than Axum because it includes HTTP(S) serving, but even that only changes a few lines)\n\nIf you want to switch from Actix to Axum, you'll be done in a couple of hours. They have different ways of routing paths and extracting requests, so for the most part that's all you have to change. Worst case you might need to adapt a stateful session middleware.\n\nIf you want to switch from Django or Ruby on Rails to something else, you're pretty much writing a whole new project, because the data model and its bindings to storage and queries are all part of the one framework. To save a couple of lines of code and make a more attractive demo, they create coupling between layers that limits you for the entire rest of the life of the project.", "time": "2023-03-24 16:21:45"}, "Mooweetye": {"comment": "Django you silver tongued devil you...", "time": "2023-03-24 16:21:28"}, "xlowen": {"comment": "Ill take a ride on this post and ask of there is any sort of project good for learning django for a more hands on experience. I want to build ecommerce from scratch, want to find the building blocks", "time": "2023-03-24 16:02:27"}, "vikingvynotking": {"comment": "This isn't /r/uidesign so you might get better responses on a more appropriate forum. Please don't turn this sub into a general programming (or on this case, design) sub or people with actual django questions will have a harder time making their voices heard.", "time": "2023-03-24 15:56:30"}, "fudgie": {"comment": "Sure. To create the transcripts, I use one of the Whisper implementations mentioned in the post, usually the GPU version with the medium.en model. The transcript generated is then parsed with a tiny bit of Python, and fed into a PostgreSQL database but any database with [full-text search](https://www.postgresql.org/docs/current/textsearch-intro.html) should works fine. You might also be fine with just keyword search which simplifies things quite a bit. \n\nThe website is a very simple Django framework application written in Python, and uses Bootstrap for CSS defaults, and jQuery for the tiny bit of JavaScript needed to play the audio. The charts used in the statistics is a JavaScript library called Chart.js \n\nI'm sure this could be done in a myriad of different and better ways, but I wanted to experiment with these frameworks and technologies more than that they were perfect for the job.", "time": "2023-03-24 15:50:04"}}}